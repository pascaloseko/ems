// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pascaloseko/ems/internal/employees (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	employees "github.com/pascaloseko/ems/internal/employees"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockStore) Authenticate(arg0 context.Context, arg1 employees.Employee) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockStoreMockRecorder) Authenticate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockStore)(nil).Authenticate), arg0, arg1)
}

// GetAllEmployees mocks base method.
func (m *MockStore) GetAllEmployees(arg0 context.Context) ([]employees.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEmployees", arg0)
	ret0, _ := ret[0].([]employees.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEmployees indicates an expected call of GetAllEmployees.
func (mr *MockStoreMockRecorder) GetAllEmployees(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEmployees", reflect.TypeOf((*MockStore)(nil).GetAllEmployees), arg0)
}

// GetDepartmentIdByName mocks base method.
func (m *MockStore) GetDepartmentIdByName(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartmentIdByName", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartmentIdByName indicates an expected call of GetDepartmentIdByName.
func (mr *MockStoreMockRecorder) GetDepartmentIdByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartmentIdByName", reflect.TypeOf((*MockStore)(nil).GetDepartmentIdByName), arg0, arg1)
}

// GetDepartmentNameById mocks base method.
func (m *MockStore) GetDepartmentNameById(arg0 context.Context, arg1 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartmentNameById", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepartmentNameById indicates an expected call of GetDepartmentNameById.
func (mr *MockStoreMockRecorder) GetDepartmentNameById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartmentNameById", reflect.TypeOf((*MockStore)(nil).GetDepartmentNameById), arg0, arg1)
}

// GetEmployeeIdByUsername mocks base method.
func (m *MockStore) GetEmployeeIdByUsername(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeIdByUsername", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeIdByUsername indicates an expected call of GetEmployeeIdByUsername.
func (mr *MockStoreMockRecorder) GetEmployeeIdByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeIdByUsername", reflect.TypeOf((*MockStore)(nil).GetEmployeeIdByUsername), arg0, arg1)
}

// HashPassword mocks base method.
func (m *MockStore) HashPassword(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockStoreMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockStore)(nil).HashPassword), arg0)
}

// Save mocks base method.
func (m *MockStore) Save(arg0 context.Context, arg1 employees.Employee) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockStoreMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStore)(nil).Save), arg0, arg1)
}

// SaveDepartment mocks base method.
func (m *MockStore) SaveDepartment(arg0 context.Context, arg1 employees.Department) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDepartment", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveDepartment indicates an expected call of SaveDepartment.
func (mr *MockStoreMockRecorder) SaveDepartment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDepartment", reflect.TypeOf((*MockStore)(nil).SaveDepartment), arg0, arg1)
}
