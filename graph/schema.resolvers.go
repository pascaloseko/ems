package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/pascaloseko/ems/graph/model"
	"github.com/pascaloseko/ems/internal/auth"
	"github.com/pascaloseko/ems/internal/employees"
	"github.com/pascaloseko/ems/internal/pkg/jwt"
)

// CreateEmployee is the resolver for the createEmployee field.
func (r *mutationResolver) CreateEmployee(ctx context.Context, input model.NewEmployee) (*string, error) {
	var token = ""

	var employee employees.Employee
	employee.FirstName = input.FirstName
	employee.LastName = input.LastName
	employee.Username = input.Username
	employee.Email = input.Email
	employee.DOB = input.Dob
	employee.Password = r.emp.HashPassword(input.Password)
	employee.Position = input.Position

	_, err := r.emp.Save(ctx, employee)
	if err != nil {
		return nil, fmt.Errorf("failed to save employee: %w", err)
	}
	token, err = jwt.GenerateToken(employee.Username)
	if err != nil {
		return &token, err
	}
	return &token, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	username, err := jwt.ParseToken(input.Token)
	if err != nil {
		return "", ErrAccessDenied
	}
	token, err := jwt.GenerateToken(username)
	if err != nil {
		return "", err
	}
	return token, nil
}

// Employees is the resolver for the employees field.
func (r *queryResolver) Employees(ctx context.Context) ([]*model.Employee, error) {
	user := auth.ForContext(ctx)
	if user == nil {
		return nil, ErrAccessDenied
	}
	var resultEmployees []*model.Employee
	employees, err := r.emp.GetAllEmployees(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get employees: %w", err)
	}
	for _, employee := range employees {

		resultEmployees = append(resultEmployees, &model.Employee{
			ID:        strconv.Itoa(int(employee.ID)),
			FirstName: employee.FirstName,
			LastName:  employee.LastName,
			Username:  employee.Username,
			Email:     employee.Email,
			Dob:       employee.DOB,
			Password:  employee.Password,
			Position:  employee.Position,
		})
	}
	return resultEmployees, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }


var ErrAccessDenied = errors.New("access denied")
